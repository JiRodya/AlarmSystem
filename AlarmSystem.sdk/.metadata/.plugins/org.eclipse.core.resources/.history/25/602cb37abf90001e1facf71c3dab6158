// Include scutimer header file
#include "xscugic.h"
#include "xil_exception.h"
#include "xil_printf.h"
#include "interrup_handler.h"
#include "xparameters.h"
#include "xscutimer.h"

//my peripherals
#include "io.h"
#include "clock.h"


/***************************** Variables declaration *******************************/
XScuGic IntcInstance;		/* Interrupt Controller Instance */
XScuGic *IntcInstancePtr = &IntcInstance;
XScuGic_Config *IntcConfig;

// PS Timer related definitions
XScuTimer_Config *ConfigPtr;
XScuTimer Timer;		/* Cortex A9 SCU Private Timer Instance */
XScuTimer *TimerInstancePtr = &Timer;


/************************* Forward declaration *******************************/
static void TimerIntrHandler(void *CallBackRef);
static void Push_Intr_Handler(void *CallBackRef);
static void Dip_Intr_Handler(void *CallBackRef);

/*****************************************************************************/
/**
*
* This function initialize interrupt controller
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note		None.
*
******************************************************************************/
int Init_GIC()
{
	//Interrupt Controller initialization
	IntcConfig = XScuGic_LookupConfig(XPAR_SCUGIC_0_DEVICE_ID);
	if(!IntcConfig)
	{
	   xil_printf("Looking for GIC failed! \r\n");
	   return XST_FAILURE;
	}

	int xResult = XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig, IntcConfig->CpuBaseAddress);
	if(xResult != XST_SUCCESS)
	{
	   xil_printf("Init GIC failed! \r\n");
	   return XST_FAILURE;
	}

	return XST_SUCCESS;
}


/*****************************************************************************/
/**
*
* This function connect GPIOes to GIC and configure GIC so that interrupts can occur
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note		None.
*
******************************************************************************/
int Configure_GIC()
{
	//Interrupt Priority and Trigger Setup for dip switches
	XScuGic_SetPriorityTriggerType(IntcInstancePtr, XPAR_FABRIC_SWITCHES_IP2INTC_IRPT_INTR, 0xA0, 0x3);
	//Connect GPIO Interrupt to handler dipswitch
	int xResult = XScuGic_Connect(IntcInstancePtr,
							XPAR_FABRIC_SWITCHES_IP2INTC_IRPT_INTR,
							(Xil_ExceptionHandler)Dip_Intr_Handler,
							(void *)&SwitchInstance);
	if(xResult != XST_SUCCESS)
	{
	   xil_printf("Connect dip switch interrupt failed! \r\n");
	   return XST_FAILURE;
	}

	//Interrupt Priority and Trigger Setup for push button
	XScuGic_SetPriorityTriggerType(IntcInstancePtr, XPAR_FABRIC_BUTTONS_IP2INTC_IRPT_INTR, 0x8, 0x3);
	//Connect GPIO Interrupt to handler for push button
	xResult = XScuGic_Connect(IntcInstancePtr,
							XPAR_FABRIC_BUTTONS_IP2INTC_IRPT_INTR,
							(Xil_ExceptionHandler)Push_Intr_Handler,
							(void *)&ButtonInstance);
	if(xResult != XST_SUCCESS)
	{
	   xil_printf("Connect push button interrupt failed! \r\n");
	   return XST_FAILURE;
	}


	//Interrupt Priority and Trigger Setup for timer
	XScuGic_SetPriorityTriggerType(IntcInstancePtr, XPAR_SCUTIMER_INTR, 0xA8, 0x3);
	/*
	 * Connect the interrupt handler that will be called when an
	 * interrupt for the timer occurs
	 */
	xResult = XScuGic_Connect(IntcInstancePtr, XPAR_SCUTIMER_INTR,
				(Xil_ExceptionHandler)TimerIntrHandler,
				(void *)TimerInstancePtr);
	if(xResult != XST_SUCCESS){
	   xil_printf("Connect timer interrupt failed! \r\n");
	   return XST_FAILURE;
	}

	return XST_SUCCESS;
}
