// Include scutimer header file
#include "xscugic.h"
#include "xil_exception.h"
#include "xil_printf.h"
#include "interrup_handler.h"
#include "xparameters.h"
#include "xscutimer.h"

//my peripherals
#include "io.h"
#include "clock.h"

//extern XScuTimer *TimerInstancePtr;

/***************************** Variables declaration *******************************/
XScuGic IntcInstance;		/* Interrupt Controller Instance */
XScuGic *IntcInstancePtr = &IntcInstance;
XScuGic_Config *IntcConfig;


/************************* Forward declaration *******************************/
static void TimerIntrHandler(void *CallBackRef);
static void Push_Intr_Handler(void *CallBackRef);
static void Dip_Intr_Handler(void *CallBackRef);



/***************************** Generic Functions *******************************/

/**
*
* This function initialize interrupt controller
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note		None.
*
*/
int Init_GIC()
{
	//Interrupt Controller initialization
	IntcConfig = XScuGic_LookupConfig(XPAR_SCUGIC_0_DEVICE_ID);
	if(!IntcConfig)
	{
	   xil_printf("Looking for GIC failed! \r\n");
	   return XST_FAILURE;
	}

	int xResult = XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig, IntcConfig->CpuBaseAddress);
	if(xResult != XST_SUCCESS)
	{
	   xil_printf("Init GIC failed! \r\n");
	   return XST_FAILURE;
	}

	return XST_SUCCESS;
}



/**
*
* This function connect GPIOes to GIC and configure GIC so that interrupts can occur
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note		None.
*
*/
int Configure_GIC()
{
	//Interrupt Priority and Trigger Setup for dip switches
	XScuGic_SetPriorityTriggerType(IntcInstancePtr, XPAR_FABRIC_SWITCHES_IP2INTC_IRPT_INTR, 0xA0, 0x3);
	//Connect GPIO Interrupt to handler dipswitch
	int xResult = XScuGic_Connect(IntcInstancePtr,
							XPAR_FABRIC_SWITCHES_IP2INTC_IRPT_INTR,
							(Xil_ExceptionHandler)Dip_Intr_Handler,
							(void *)&SwitchInstance);
	if(xResult != XST_SUCCESS)
	{
	   xil_printf("Connect dip switch interrupt failed! \r\n");
	   return XST_FAILURE;
	}

	//Interrupt Priority and Trigger Setup for push button
	XScuGic_SetPriorityTriggerType(IntcInstancePtr, XPAR_FABRIC_BUTTONS_IP2INTC_IRPT_INTR, 0x8, 0x3);
	//Connect GPIO Interrupt to handler for push button
	xResult = XScuGic_Connect(IntcInstancePtr,
							XPAR_FABRIC_BUTTONS_IP2INTC_IRPT_INTR,
							(Xil_ExceptionHandler)Push_Intr_Handler,
							(void *)&ButtonInstance);
	if(xResult != XST_SUCCESS)
	{
	   xil_printf("Connect push button interrupt failed! \r\n");
	   return XST_FAILURE;
	}


	//Interrupt Priority and Trigger Setup for timer
	XScuGic_SetPriorityTriggerType(IntcInstancePtr, XPAR_SCUTIMER_INTR, 0xA8, 0x3);
	/*
	 * Connect the interrupt handler that will be called when an
	 * interrupt for the timer occurs
	 */
	xResult = XScuGic_Connect(IntcInstancePtr, XPAR_SCUTIMER_INTR,
				(Xil_ExceptionHandler)TimerIntrHandler,
				(void *)TimerInstancePtr);
	if(xResult != XST_SUCCESS){
	   xil_printf("Connect timer interrupt failed! \r\n");
	   return XST_FAILURE;
	}

	return XST_SUCCESS;
}

void EnableInts()
{
	/*
	 * Enable the interrupt for devices
	 */
   //Enable GPIO and Timer Interrupts in the controller
   XScuGic_Enable(IntcInstancePtr, XPAR_FABRIC_SWITCHES_IP2INTC_IRPT_INTR);
   XScuGic_Enable(IntcInstancePtr, XPAR_FABRIC_BUTTONS_IP2INTC_IRPT_INTR);
   XScuGic_Enable(IntcInstancePtr, XPAR_SCUTIMER_INTR);

 //Enable CPU Interface Control Register
    /** @name Control Register
     * CPU Interface Control register definitions
     * All bits are defined here although some are not available in the non-secure
     * mode.
     * @{
     */
 //   #define XSCUGIC_CNTR_SBPR_MASK	0x00000010U    /**< Secure Binary Pointer,
 //                                                    0=separate registers,
 //                                                    1=both use bin_pt_s */
 //   #define XSCUGIC_CNTR_FIQEN_MASK	0x00000008U    /**< Use nFIQ_C for secure
 //                                                     interrupts,
 //                                                     0= use IRQ for both,
 //                                                     1=Use FIQ for secure, IRQ for non*/
 //   #define XSCUGIC_CNTR_ACKCTL_MASK	0x00000004U    /**< Ack control for secure or non secure */
 //   #define XSCUGIC_CNTR_EN_NS_MASK		0x00000002U    /**< Non Secure enable */
 //   #define XSCUGIC_CNTR_EN_S_MASK		0x00000001U    /**< Secure enable, 0=Disabled, 1=Enabled */
   XScuGic_CPUWriteReg(IntcInstancePtr, 0x0, 0xf);

   //Enable GPIO Interrupts Interrupt
	XGpio_InterruptEnable(&SwitchInstance, 0xF);
    XGpio_InterruptGlobalEnable(&SwitchInstance);

	XGpio_InterruptEnable(&ButtonInstance, 0xF);
    XGpio_InterruptGlobalEnable(&ButtonInstance);

   /*
	 * Enable the timer interrupts for timer mode.
	 */
	XScuTimer_EnableInterrupt(TimerInstancePtr);
}

/***************************** Handler Functions *******************************/
static void Dip_Intr_Handler(void *CallBackRef)
{

}

static void Push_Intr_Handler(void *CallBackRef)
{

}


/**
*
* This function is the Interrupt handler for the Timer interrupt of the
* Timer device. It is called on the expiration of the timer counter in
* interrupt context.
*
* @param	CallBackRef is a pointer to the callback function.
*
* @return	None.
*
* @note		None.
*
*/
static void TimerIntrHandler(void *CallBackRef)
{

}
