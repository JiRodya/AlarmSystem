#include "clock.h"
#include "xparameters.h"
#include "xil_io.h"
#include "xtime_l.h"

// Constants for the PMODRTCC registers
#define PMODRTCC_CTRL_REG_OFFSET 0
#define PMODRTCC_SEC_REG_OFFSET 1
#define PMODRTCC_MIN_REG_OFFSET 2
#define PMODRTCC_HOUR_REG_OFFSET 3
#define PMODRTCC_ALARM_SEC_REG_OFFSET 5
#define PMODRTCC_ALARM_MIN_REG_OFFSET 6
#define PMODRTCC_ALARM_HOUR_REG_OFFSET 7

// Global variables for the clock and alarm time
static uint8_t current_hour = 0;
static uint8_t current_minute = 0;
static uint8_t current_second = 0;
static uint8_t alarm_hour = 0;
static uint8_t alarm_minute = 0;
static uint8_t alarm_second = 0;

void clock_init() {
    // Initialize your clock hardware here, using XPAR_PMODRTCC_0_AXI_LITE_IIC_BASEADDR
    // You can refer to the driver for initialization details
}

void set_alarm(uint8_t hours, uint8_t minutes, uint8_t seconds) {
    alarm_hour = hours;
    alarm_minute = minutes;
    alarm_second = seconds;

    // Set the alarm time in your hardware, updating the PMODRTCC_ALARM_* registers
}

int is_alarm_triggered() {
    // Check if the current time matches the alarm time
    return (current_hour == alarm_hour && current_minute == alarm_minute && current_second == alarm_second);
}

void update_clock() {
    // Read the current time from your hardware, updating the PMODRTCC_SEC_REG_OFFSET, MIN, and HOUR registers
    // Use Xil_In32 to read the registers and update the global variables current_hour, current_minute, and current_second
}

uint8_t get_current_hour() {
    return current_hour;
}

uint8_t get_current_minute() {
    return current_minute;
}

uint8_t get_current_second() {
    return current_second;
}
