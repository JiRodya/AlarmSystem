#include "interrupt_handler.h"
#include "clock.h"
#include "io.h"
#include "oled.h"
#include <stdio.h>
#include "sleep.h"
#include "xparameters.h"
//#include <unistd.h>

// Include scutimer header file
#include "xscugic.h"
#include "xil_exception.h"
#include "xil_printf.h"



#define ONE_TENTH 32500000 // half of the CPU clock speed/10



int main() {
//    PmodRTCC myRTCC;
    PmodOLED myOLED;
    Time currentTime;

    Init_GIC();

	// Configure the GIC to respond to your specific interrupts
	Configure_GIC();

	// Enable the interrupts
	EnableInts();
    // Initialize Clock and OLED
    Clock_Init();
    OLED_Initialize(&myOLED, XPAR_PMODOLED_0_AXI_LITE_GPIO_BASEADDR,
                    XPAR_PMODOLED_0_AXI_LITE_SPI_BASEADDR, 0, 0); // Assuming normal orientation and no inversion

//    OLED_DisplayIcons(&myOLED, ALARM);
//    uint8_t h = 0x01;
//    uint8_t m = 58;
//    uint8_t s = 0x00;
//    Clock_SetAlarm(h, m, s);
    Time alarmTime;

   // Hardcoded alarm time for testing
   alarmTime.hour = 0x04;   // Set hours (in 24-hour format or BCD as required)
   alarmTime.minute = 38; // Set minutes to 30 minutes past the hour
   alarmTime.second = 0x00; // Set seconds to 00

    Clock_SetAlarm(alarmTime);

    while (1) {
    	// Get the current time from RTCC
		currentTime = Clock_GetTime( RTCC_TARGET_RTCC);

		printf("Raw Time - Hours: %02x, Minutes: %02x, Seconds: %02x\n",
					   currentTime.hour, currentTime.minute, currentTime.second);


		OLED_DisplayTime(&myOLED, currentTime.hour, currentTime.minute,currentTime.second);
		OLED_DisplayDate(&myOLED, currentTime.day, currentTime.month,currentTime.year);

		//alarm checks and leds
		if (alarmCount){
			IO_SetLedValue(LED_COUNTER,alarmCounter);
			alarmCounter --;
		}

		sleep(1);
        }

        // Clean up, if necessary
        OLED_Terminate(&myOLED);

    return 0;
}



