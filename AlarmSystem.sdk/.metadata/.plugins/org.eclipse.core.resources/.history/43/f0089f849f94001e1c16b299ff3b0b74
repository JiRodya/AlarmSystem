#include "xgpio.h"
#include "xscutimer.h"
#include "xscugic.h"
#include  "interrupt_handler.h"
#include "clock.h"
#include "stdio.h"
#include "xil_cache.h"
#include "data_handle.h"
#include "io.h"
#include "oled.h"

#define ONE_TENTH 32500000 // Half of the CPU clock speed/10

extern XGpio dip, push,led;
extern int led_count;
int psb_check, dip_check, dip_check_prev, count;


// Global inherited variables
extern XScuTimer_Config *ConfigPtr;
extern XScuTimer Timer;		/* Cortex A9 SCU Private Timer Instance */
extern XScuTimer *TimerInstancePtr;


static int Init_Peripherals();
void FormatDate(Time time, char* buffer);
void FormatTime(Time time, char* buffer);

int main(){

	//initialization phase
	//--peripherals
	Init_Peripherals();
	count =0;

	//--interrupts
	Init_GIC();
	xil_printf("Init GIC done !\r\n");
	Configure_GIC();
	xil_printf("Configure GIC done !\r\n");
	EnableInts();
	printf("Enable Interrupts done !\r\n");
	ExceptionInit();

	//--vars
	dip_check_prev = XGpio_DiscreteRead(&dip, 1);

	//--other timer settings
	XScuTimer_LoadTimer(&Timer, ONE_TENTH*dip_check_prev);
	ScuTimer_EnableAutoReload(&Timer);


}


int Init_Peripherals(){
	int xResult = IO_Initialize();
	OLED_Initialize();
	Clock_Init(SET_CLOCK);

	// Initialize the timer
	ConfigPtr = XScuTimer_LookupConfig (XPAR_PS7_SCUTIMER_0_DEVICE_ID);
	xResult = XScuTimer_CfgInitialize(&Timer, ConfigPtr, ConfigPtr->BaseAddr);
	if (xResult != XST_SUCCESS){
		xil_printf("Timer init() failed\r\n");
		return XST_FAILURE;
	}
	return xResult;
}

void DisableCaches() {
   Xil_DCacheFlush();
   Xil_DCacheDisable();
   Xil_ICacheInvalidate();
   Xil_ICacheDisable();
}

void EnableCaches(){
	Xil_ICacheEnable();
	Xil_DCacheEnable();
}


void FormatDate(Time time, char* buffer) {
    int intYear = bcd2int(time.year); // Convert BCD to integer, if necessary
    // Format date - Day Month/Date/Year
    snprintf(buffer, 30, "%s %x/%x/%04d", weekdays[time.day], time.month, time.date, intYear + 2000);
}

void FormatTime(Time time, char* buffer) {
   // Format time - hour:minute AM/PM
   if (time.ampm) {
      snprintf(buffer, 20, "%x:%02x:%02x PM", time.hour, time.minute,time.second);
   } else {
      snprintf(buffer, 20, "%x:%02x:%02x AM", time.hour, time.minute,time.second);
   }
}
