#include "xparameters.h"
#include "xgpio.h"
#include "xscutimer.h"
#include "interrupt_handler.h"
#include "xil_printf.h"
//#include "led_ip.h"
#include "io.h"

extern XGpio SwitchInstance, ButtonInstance;
extern XScuTimer Timer; // Define Timer here
extern XScuTimer *TimerInstancePtr ;
extern XScuTimer_Config *ConfigPtr;


#define LED_CHANNEL 1
volatile int led_count = 10;
int psb_check, dip_check, dip_check_prev = 0, count =10;

#define ONE_TENTH 32500000

static int Init_Peripherals() {
    int Status;

//    Status = XGpio_Initialize(&SwitchInstance, XPAR_SWITCHES_DEVICE_ID);
//    XGpio_SetDataDirection(&SwitchInstance, 1, 0xFFFFFFFF);
//
//    Status |= XGpio_Initialize(&ButtonInstance, XPAR_BUTTONS_DEVICE_ID);
//    XGpio_SetDataDirection(&ButtonInstance, 1, 0xFFFFFFFF);
//
//    ConfigPtr = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
//    Status |= XScuTimer_CfgInitialize(&Timer, ConfigPtr, ConfigPtr->BaseAddr);
    Status = IO_Initialize();

    return Status;
}

int main() {
    xil_printf("-- Start of the Program --\r\n");

    if (Init_Peripherals() != XST_SUCCESS) {
        xil_printf("Peripheral Initialization Failed\r\n");
        return XST_FAILURE;
    }

    if (Init_GIC() != XST_SUCCESS) {
        xil_printf("GIC Initialization Failed\r\n");
        return XST_FAILURE;
    }

    Configure_GIC();
    EnableInts();
    ExceptionInit();

    XScuTimer_LoadTimer(TimerInstancePtr, ONE_TENTH);
    XScuTimer_EnableAutoReload(TimerInstancePtr);
    XScuTimer_Start(TimerInstancePtr);

    while (1) {

  	  // Read push buttons and break the loop if Center button pressed
  	  psb_check = XGpio_DiscreteRead(&ButtonInstance, 1);
  	  if(psb_check > 0)
  		  	 xil_printf("Push button Status %x\r\n", psb_check);

  	  if(psb_check == 8)
  	  {
  		  xil_printf("Push button pressed: Exiting\r\n");
  		  XScuTimer_Stop(TimerInstancePtr);
  		  break;
  	  }
  	   dip_check = XGpio_DiscreteRead(&SwitchInstance, 1);
  	    if (dip_check != dip_check_prev) {
  	        xil_printf("DIP Switch Status %x, %x\r\n", dip_check_prev, dip_check);
  	        dip_check_prev = dip_check;
  	        XScuTimer_LoadTimer(TimerInstancePtr, ONE_TENTH * dip_check);
  	        led_count = 10; // Reset here as well
  	        count = 10;
  	    }
  	  if(XScuTimer_IsExpired(TimerInstancePtr)) {
  			  // clear status bit
  		  	  XScuTimer_ClearInterruptStatus(TimerInstancePtr);

  		  	  if(count <=0)
  		  		  count = 10;
  		  	  // output the count to LED and increment the count
  		  	 IO_SetLedValue(LED_COUNTER, led_count);
  		  	  count--;
  	  }
    }

    DisableIntr();
    return 0;
}
